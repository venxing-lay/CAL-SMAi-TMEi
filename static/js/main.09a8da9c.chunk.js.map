{"version":3,"sources":["components/basicCal/component/Display.js","components/basicCal/component/Button.js","components/basicCal/component/ButtonPanel.js","components/basicCal/logic/operate.js","components/basicCal/logic/calculate.js","components/basicCal/logic/isNumber.js","components/Header.js","App.js","index.js"],"names":["Display","className","this","props","value","React","Component","Button","handleClick","clickHandler","name","orange","wide","bbb","join","trim","onClick","ButtonPanel","buttonName","operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","alert","div","toFixed","Error","calculate","obj","total","next","test","result","includes","parseFloat","Header","id","class","App","state","count","setState","ReactDOM","render","document","getElementById"],"mappings":"2SAKqBA,G,6KAOjB,OACE,qBAAKC,UAAU,oBAAf,SACE,qBAAKA,UAAU,SAAf,SAAyBC,KAAKC,MAAMC,c,GATPC,IAAMC,YCDtBC,G,kNAUnBC,YAAc,WACZ,EAAKL,MAAMM,aAAa,EAAKN,MAAMO,O,uDAInC,IAAMT,EAAY,CAChB,mBACAC,KAAKC,MAAMQ,OAAS,SAAW,GAC/BT,KAAKC,MAAMS,KAAO,OAAS,GAC3BV,KAAKC,MAAMU,IAAM,MAAQ,IAG3B,OACE,qBAAKZ,UAAWA,EAAUa,KAAK,KAAKC,OAApC,SACE,wBAAQC,QAASd,KAAKM,YAAtB,SAAoCN,KAAKC,MAAMO,a,GAxBnBL,IAAMC,YCErBW,G,kNAKnBT,YAAc,SAAAU,GACZ,EAAKf,MAAMM,aAAaS,I,uDAIxB,OACE,sBAAKjB,UAAU,yBAAf,UACE,gCACE,cAAC,EAAD,CAAQS,KAAK,KAAKD,aAAcP,KAAKM,YAAaG,QAAM,IACxD,cAAC,EAAD,CAAQD,KAAK,MAAMD,aAAcP,KAAKM,cACtC,cAAC,EAAD,CAAQE,KAAK,IAAID,aAAcP,KAAKM,cACpC,cAAC,EAAD,CAAQE,KAAK,OAAID,aAAcP,KAAKM,iBAEtC,gCACE,cAAC,EAAD,CAAQE,KAAK,IAAID,aAAcP,KAAKM,cACpC,cAAC,EAAD,CAAQE,KAAK,IAAID,aAAcP,KAAKM,cACpC,cAAC,EAAD,CAAQE,KAAK,IAAID,aAAcP,KAAKM,cACpC,cAAC,EAAD,CAAQE,KAAK,IAAID,aAAcP,KAAKM,iBAEtC,gCACE,cAAC,EAAD,CAAQE,KAAK,IAAID,aAAcP,KAAKM,cACpC,cAAC,EAAD,CAAQE,KAAK,IAAID,aAAcP,KAAKM,cACpC,cAAC,EAAD,CAAQE,KAAK,IAAID,aAAcP,KAAKM,cACpC,cAAC,EAAD,CAAQE,KAAK,IAAID,aAAcP,KAAKM,iBAEtC,gCACE,cAAC,EAAD,CAAQE,KAAK,IAAID,aAAcP,KAAKM,cACpC,cAAC,EAAD,CAAQE,KAAK,IAAID,aAAcP,KAAKM,cACpC,cAAC,EAAD,CAAQE,KAAK,IAAID,aAAcP,KAAKM,cACpC,cAAC,EAAD,CAAQE,KAAK,IAAID,aAAcP,KAAKM,iBAEtC,gCACE,cAAC,EAAD,CAAQE,KAAK,IAAID,aAAcP,KAAKM,YAAaI,MAAI,IACrD,cAAC,EAAD,CAAQF,KAAK,IAAID,aAAcP,KAAKM,cACpC,cAAC,EAAD,CAAQE,KAAK,IAAID,aAAcP,KAAKM,YAAaK,KAAG,c,GAvCrBR,IAAMC,Y,gBCJhC,SAASa,EAAQC,EAAWC,EAAWC,GACpD,IAAMC,EAAMC,IAAIJ,GAAa,KACvBK,EAAMD,IAAIH,IAA4B,SAAdC,GAAmC,MAAdA,EAAoB,IAAK,MAE5E,GAAkB,MAAdA,EACF,OAAOC,EAAIG,KAAKD,GAAKE,WAEvB,GAAkB,MAAdL,EACF,OAAOC,EAAIK,MAAMH,GAAKE,WAExB,GAAkB,MAAdL,EACF,OAAOC,EAAIM,MAAMJ,GAAKE,WAExB,GAAkB,SAAdL,EACF,MAAY,MAARG,GACFK,MAAM,qBACC,KAEAP,EAAIQ,IAAIN,GAAKO,QAAQ,GAChBL,WAGhB,MAAMM,MAAM,sBAAD,OAAuBX,EAAvB,MCVE,SAASY,EAAUC,EAAKjB,GACrC,GAAmB,OAAfA,EACF,MAAO,CACLkB,MAAO,KACPC,KAAM,KACNf,UAAW,MAIf,GCrBO,SAASgB,KDqBHpB,GAEX,MAAmB,MAAfA,GAAmC,MAAbiB,EAAIE,KACrB,GAGLF,EAAIb,UACFa,EAAIE,KACC,CAAEA,KAAMF,EAAIE,KAAOnB,GAErB,CAAEmB,KAAMnB,GAGbiB,EAAIE,KAEC,CACLA,KAFwB,MAAbF,EAAIE,KAAenB,EAAaiB,EAAIE,KAAOnB,EAGtDkB,MAAO,MAGJ,CACLC,KAAMnB,EACNkB,MAAO,MAIX,GAAmB,MAAflB,EAAoB,CACtB,GAAIiB,EAAIb,WAAaa,EAAIE,KAAM,CAC7B,IAAME,EAASpB,EAAQgB,EAAIC,MAAOD,EAAIE,KAAMF,EAAIb,WAChD,MAAO,CACLc,MAAOZ,IAAIe,GACRR,IAAIP,IAAI,QACRG,WACHU,KAAM,KACNf,UAAW,MAGf,OAAIa,EAAIE,KACC,CACLA,KAAMb,IAAIW,EAAIE,MACXN,IAAIP,IAAI,QACRG,YAGA,GAGT,MAAmB,MAAfT,EACEiB,EAAIE,KAEFF,EAAIE,KAAKG,SAAS,KACb,GAEF,CAAEH,KAAMF,EAAIE,KAAO,KAErB,CAAEA,KAAM,MAGE,MAAfnB,EACEiB,EAAIE,MAAQF,EAAIb,UACX,CACLc,MAAOjB,EAAQgB,EAAIC,MAAOD,EAAIE,KAAMF,EAAIb,WACxCe,KAAM,KACNf,UAAW,MAIN,GAIQ,QAAfJ,EACEiB,EAAIE,KACC,CAAEA,OAAQ,EAAII,WAAWN,EAAIE,OAAOV,YAEzCQ,EAAIC,MACC,CAAEA,QAAS,EAAIK,WAAWN,EAAIC,QAAQT,YAExC,GAYLQ,EAAIb,UACC,CACLc,MAAOjB,EAAQgB,EAAIC,MAAOD,EAAIE,KAAMF,EAAIb,WACxCe,KAAM,KACNf,UAAWJ,GAOViB,EAAIE,KASF,CACLD,MAAOD,EAAIE,KACXA,KAAM,KACNf,UAAWJ,GAXJ,CAAEI,UAAWJ,G,WEhHTwB,EAVA,WACX,OACI,mCACI,qBAAKC,GAAG,SAASC,MAAM,uBAAvB,SACI,uBAAMA,MAAM,kBAAZ,UAA8B,cAAC,IAAD,CAAeD,GAAK,gBAAlD,wBCCKE,G,kNACnBC,MAAQ,CACNV,MAAO,KACPC,KAAM,KACNf,UAAW,KACXyB,MAAO,G,EAGTvC,YAAc,SAAAU,GAEZ,EAAK8B,SAASd,EAAU,EAAKY,MAAO5B,IACpC,EAAK4B,MAAMC,S,uDAKX,OACE,sBAAK9C,UAAU,MAAf,UACI,cAAC,EAAD,IACA,sBAAKA,UAAU,gBAAf,UACE,cAAC,EAAD,CAASG,MAAOF,KAAK4C,MAAMT,MAAQnC,KAAK4C,MAAMV,OAAS,MACvD,cAAC,EAAD,CAAa3B,aAAcP,KAAKM,wB,GArBXH,IAAMC,Y,MCHvC2C,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.09a8da9c.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./Display.css\";\n\nexport default class Display extends React.Component {\n  static propTypes = {\n    value: PropTypes.string,\n  };\n  \n\n  render() {\n    return (\n      <div className=\"component-display\">\n        <div className=\"result\">{this.props.value}</div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Button.css\";\n\nexport default class Button extends React.Component {\n  \n  static propTypes = {\n    name: PropTypes.string,\n    orange: PropTypes.bool,\n    bbb: PropTypes.bool,\n    wide: PropTypes.bool,\n    clickHandler: PropTypes.func,\n  };\n\n  handleClick = () => {\n    this.props.clickHandler(this.props.name);\n  };\n\n  render() {\n    const className = [\n      \"component-button\",\n      this.props.orange ? \"orange\" : \"\",\n      this.props.wide ? \"wide\" : \"\",\n      this.props.bbb ? \"bbb\" : \"\",\n    ];\n\n    return (\n      <div className={className.join(\" \").trim()}>\n        <button onClick={this.handleClick}>{this.props.name}</button>\n      </div>\n    );\n  }\n}\n","import Button from \"./Button\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./ButtonPanel.css\";\n\nexport default class ButtonPanel extends React.Component {\n  static propTypes = {\n    clickHandler: PropTypes.func,\n  };\n\n  handleClick = buttonName => {\n    this.props.clickHandler(buttonName);\n  };\n\n  render() {\n    return (\n      <div className=\"component-button-panel\">\n        <div>\n          <Button name=\"AC\" clickHandler={this.handleClick} orange />\n          <Button name=\"-/+\" clickHandler={this.handleClick} />\n          <Button name=\"%\" clickHandler={this.handleClick} />\n          <Button name=\"รท\" clickHandler={this.handleClick}  />\n        </div>\n        <div>\n          <Button name=\"7\" clickHandler={this.handleClick} />\n          <Button name=\"8\" clickHandler={this.handleClick} />\n          <Button name=\"9\" clickHandler={this.handleClick} />\n          <Button name=\"x\" clickHandler={this.handleClick}  />\n        </div>\n        <div>\n          <Button name=\"4\" clickHandler={this.handleClick} />\n          <Button name=\"5\" clickHandler={this.handleClick} />\n          <Button name=\"6\" clickHandler={this.handleClick} />\n          <Button name=\"-\" clickHandler={this.handleClick}  />\n        </div>\n        <div>\n          <Button name=\"1\" clickHandler={this.handleClick}  />\n          <Button name=\"2\" clickHandler={this.handleClick} />\n          <Button name=\"3\" clickHandler={this.handleClick} />\n          <Button name=\"+\" clickHandler={this.handleClick}  />\n        </div>\n        <div>\n          <Button name=\"0\" clickHandler={this.handleClick} wide />\n          <Button name=\",\" clickHandler={this.handleClick} />\n          <Button name=\"=\" clickHandler={this.handleClick} bbb />\n        </div>\n      </div>\n    );\n  }\n}\n","import Big from \"big.js\";\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne || \"0\");\n  const two = Big(numberTwo || (operation === \"รท\" || operation === 'x' ? \"1\": \"0\")); //If dividing or multiplying, then 1 maintains current value in cases of null\n  let temp = 0;\n  if (operation === \"+\") {\n    return one.plus(two).toString();\n  }\n  if (operation === \"-\") {\n    return one.minus(two).toString();\n  }\n  if (operation === \"x\") {\n    return one.times(two).toString();\n  }\n  if (operation === \"รท\") {\n    if (two === \"0\") {\n      alert(\"Divide by 0 error\");\n      return \"0\";\n    } else {\n      temp = one.div(two).toFixed(2);\n      return temp.toString();\n    }\n  }\n  throw Error(`Unknown operation '${operation}'`);\n}\n","import Big from \"big.js\";\n\nimport operate from \"./operate\";\nimport isNumber from \"./isNumber\";\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:String      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === \"AC\") {\n    return {\n      total: null,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    \n    if (buttonName === \"0\" && obj.next === \"0\") {\n      return {};\n    }\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return { next: obj.next + buttonName };\n      }\n      return { next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      const next = obj.next === \"0\" ? buttonName : obj.next + buttonName;\n      return {\n        next,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === \"%\") {\n    if (obj.operation && obj.next) {\n      const result = operate(obj.total, obj.next, obj.operation);\n      return {\n        total: Big(result)\n          .div(Big(\"100\"))\n          .toString(),\n        next: null,\n        operation: null,\n      };\n    }\n    if (obj.next) {\n      return {\n        next: Big(obj.next)\n          .div(Big(\"100\"))\n          .toString(),\n      };\n    }\n    return {};\n  }\n\n  if (buttonName === \",\") {\n    if (obj.next) {\n      // ignore a . if the next number already has one\n      if (obj.next.includes(\".\")) {\n        return {};\n      }\n      return { next: obj.next + \".\" };\n    }\n    return { next: \"0.\" };\n  }\n\n  if (buttonName === \"=\") {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    } else {\n      // '=' with no operation, nothing to do\n      return {};\n    }\n  }\n\n  if (buttonName === \"-/+\") {\n    if (obj.next) {\n      return { next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n  \n\n\n  \n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n","export default function isNumber(item) {\n  \n  return /[0-9]+/.test(item);\n}\n","import React from 'react';\nimport { AiOutlineMenu } from 'react-icons/ai';\n\nconst Header = () => {\n    return (\n        <>\n            <nav id='header' class='navbar navbar-shadow'>\n                <span class='navbar-brand h1'><AiOutlineMenu id = 'navbar-icon' />CAL SMEi-TMEi</span>\n            </nav>\n        </>\n    );\n};\n\nexport default Header;\n","import React from \"react\";\nimport Display from \"./components/basicCal/component/Display\";\nimport ButtonPanel from \"./components/basicCal/component/ButtonPanel\";\nimport calculate from \"./components/basicCal/logic/calculate\";\nimport Header from './components/Header';\nimport \"./App.css\";\nimport { object } from \"prop-types\";\n\nexport default class App extends React.Component {\n  state = {\n    total: null,\n    next: null,\n    operation: null,\n    count: 0\n  };\n\n  handleClick = buttonName => {\n    \n    this.setState(calculate(this.state, buttonName));\n    this.state.count++;\n\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n          <Header/>\n          <div className=\"component-app\">\n            <Display value={this.state.next || this.state.total || \"0\"} />\n            <ButtonPanel clickHandler={this.handleClick} />\n          </div>\n      </div>\n      \n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}